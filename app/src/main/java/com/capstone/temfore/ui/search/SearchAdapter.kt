package com.capstone.temfore.ui.searchimport android.content.Intentimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.capstone.temfore.Rimport com.capstone.temfore.data.remote.response.ListRecommendItemimport com.capstone.temfore.databinding.ItemFavoriteBindingimport com.capstone.temfore.ui.detail.DetailActivityimport com.capstone.temfore.utils.TextFormatclass SearchAdapter : ListAdapter<ListRecommendItem, SearchAdapter.MyViewHolder>(DIFF_CALLBACK) {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {        val binding =            ItemFavoriteBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return MyViewHolder(binding)    }    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {        val food = getItem(position)        holder.bind(food)    }    class MyViewHolder(val binding: ItemFavoriteBinding) : RecyclerView.ViewHolder(binding.root) {        fun bind(food: ListRecommendItem) {            binding.tvTitle.text = food.title            binding.tvFoodTemp.text = TextFormat.formatTemperatureMessage(food.tempCold)            binding.tvFoodType.text = TextFormat.formatType(food.type)            binding.cvAddFavorite.visibility = View.GONE            val imgCategory = TextFormat.getCategoryImage(food.category.toString())            Glide.with(binding.foodCategory.context)                .load(imgCategory)                .into(binding.foodCategory)            Glide.with(binding.ivFoodImage.context)                .load(food.imageUrl)                .apply(                    RequestOptions.placeholderOf(R.drawable.ic_loading).error(R.drawable.ic_error)                )                .into(binding.ivFoodImage)            binding.root.setOnClickListener {                val context = binding.root.context                val intent = Intent(context, DetailActivity::class.java)                intent.putExtra("FOOD_ID", food.id.toString())                context.startActivity(intent)                Log.d(                    "RecommendationAdapter",                    "Item clicked: ${food.title} - ID: ${food.id} - Type: ${food.id?.javaClass?.simpleName}"                )                Toast.makeText(context, "Pilih : ${food.title}", Toast.LENGTH_SHORT).show()            }        }    }    companion object {        val DIFF_CALLBACK = object : DiffUtil.ItemCallback<ListRecommendItem>() {            override fun areItemsTheSame(                oldItem: ListRecommendItem,                newItem: ListRecommendItem            ): Boolean {                return oldItem == newItem            }            override fun areContentsTheSame(                oldItem: ListRecommendItem,                newItem: ListRecommendItem            ): Boolean {                return oldItem == newItem            }        }    }}