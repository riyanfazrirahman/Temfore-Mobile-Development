package com.capstone.temfore.ui.auth.loginimport android.animation.AnimatorSetimport android.animation.ObjectAnimatorimport android.os.Handlerimport android.os.Looperimport android.text.SpannableStringBuilderimport android.text.style.ForegroundColorSpanimport android.view.Viewimport androidx.core.content.ContextCompatimport com.capstone.temfore.Rimport com.capstone.temfore.databinding.ActivityLoginBindingimport kotlin.random.Randomclass LoginAnimationHelper {    fun playAnimation(binding: ActivityLoginBinding) {        playAnimationWithRandomWords(binding)        // Animasi layoutContent: bergerak dari bawah dan menjadi terlihat        val layoutContentTranslationAnimator = ObjectAnimator.ofFloat(binding.layoutContent, View.TRANSLATION_Y, 30f, 0f).apply {            duration = 1000            startDelay = 100        }        val layoutContentAlphaAnimator = ObjectAnimator.ofFloat(binding.layoutContent, View.ALPHA, 0f, 1f).apply {            duration = 1000            startDelay = 100        }        // Gabungkan animasi layoutContent        val layoutContentAnimatorSet = AnimatorSet().apply {            playTogether(layoutContentTranslationAnimator, layoutContentAlphaAnimator)        }        // Animasi elemen-elemen lainnya (pudar menjadi terlihat)        val tvEmail = ObjectAnimator.ofFloat(binding.tvEmail, View.ALPHA, 1f).setDuration(100)        val layoutEmail = ObjectAnimator.ofFloat(binding.layoutEmail, View.ALPHA, 1f).setDuration(100)        val tvPassword = ObjectAnimator.ofFloat(binding.tvPassword, View.ALPHA, 1f).setDuration(100)        val layoutPassword = ObjectAnimator.ofFloat(binding.layoutPassword, View.ALPHA, 1f).setDuration(100)        val btnForgotPassword = ObjectAnimator.ofFloat(binding.btnForgotPassword, View.ALPHA, 1f).setDuration(100)        val layoutRegister = ObjectAnimator.ofFloat(binding.layoutRegister, View.ALPHA, 1f).setDuration(100)        val layoutOr = ObjectAnimator.ofFloat(binding.layoutOr, View.ALPHA, 1f).setDuration(100)        val btnLoginWithGoogle = ObjectAnimator.ofFloat(binding.btnLoginWithGoogle, View.ALPHA, 1f).setDuration(100)        val btnLogin = ObjectAnimator.ofFloat(binding.btnLogin, View.ALPHA, 1f).setDuration(100)        // Gabungkan animasi elemen lainnya dalam urutan        val otherElementsAnimatorSet = AnimatorSet().apply {            playSequentially(                tvEmail,                layoutEmail,                tvPassword,                layoutPassword,                btnForgotPassword,                layoutRegister,                layoutOr,                btnLoginWithGoogle,                btnLogin            )            startDelay = 100  // Menunda animasi urutan ini        }        // Gabungkan kedua set animasi dan jalankan        AnimatorSet().apply {            playSequentially(                layoutContentAnimatorSet, // Animasi untuk layoutContent                otherElementsAnimatorSet  // Animasi untuk elemen lainnya            )        }.start()    }    private fun playAnimationWithRandomWords(binding: ActivityLoginBinding) {        val originalText = "Login Temfore"        val randomWords =            listOf("Login", "Temfore") // Daftar kata acak        val handler = Handler(Looper.getMainLooper())        val duration = 2000L // Total durasi animasi acak (ms)        val interval = 200L  // Interval antar perubahan teks acak (ms)        val startTime = System.currentTimeMillis()        val textView = binding.tvLabelLogo        handler.post(object : Runnable {            override fun run() {                val elapsedTime = System.currentTimeMillis() - startTime                if (elapsedTime >= duration) {                    // Setelah animasi selesai, tampilkan teks asli dengan warna yang diinginkan                    textView.text = getStyledText(binding, originalText)                } else {                    // Selama animasi, tampilkan teks acak dengan warna campur                    textView.text = generateRandomWordText(binding, randomWords)                    handler.postDelayed(this, interval)                }            }        })    }    private fun generateRandomWordText(        binding: ActivityLoginBinding,        words: List<String>    ): SpannableStringBuilder {        val spannableBuilder = SpannableStringBuilder()        // Warna untuk teks acak        val orangeColor = ContextCompat.getColor(binding.root.context, R.color.orange)        val blackColor = ContextCompat.getColor(binding.root.context, R.color.black)        // Pilih kata acak untuk setiap posisi        words.forEach { word ->            val color = if (Random.nextBoolean()) orangeColor else blackColor            val randomWord = words[Random.nextInt(words.size)]            spannableBuilder.append(randomWord).append(" ")            // Terapkan warna untuk kata            spannableBuilder.setSpan(                ForegroundColorSpan(color),                spannableBuilder.length - randomWord.length - 1,                spannableBuilder.length - 1,                SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE            )        }        return spannableBuilder    }    private fun getStyledText(        binding: ActivityLoginBinding,        text: String    ): SpannableStringBuilder {        val spannableBuilder = SpannableStringBuilder(text)        // Warna untuk "Login"        val orangeColor = ContextCompat.getColor(binding.root.context, R.color.orange)        spannableBuilder.setSpan(            ForegroundColorSpan(orangeColor),            0,            5, // "Login" panjangnya 8 karakter            SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE        )        // Warna untuk "Temfore"        val blackColor = ContextCompat.getColor(binding.root.context, R.color.black)        spannableBuilder.setSpan(            ForegroundColorSpan(blackColor),            6,            text.length, // "Temfore" dimulai dari indeks 9            SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE        )        return spannableBuilder    }}