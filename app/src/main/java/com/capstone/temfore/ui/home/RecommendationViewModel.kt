package com.capstone.temfore.ui.homeimport android.util.Logimport android.view.Viewimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.capstone.temfore.data.remote.response.ListRecommendItemimport com.capstone.temfore.data.remote.response.RecommendResponseimport com.capstone.temfore.data.remote.retrofit.ApiConfigimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseimport java.net.SocketTimeoutExceptionclass RecommendationViewModel : ViewModel() {    private val _recommendations = MutableLiveData<List<ListRecommendItem>>()    val recommendations: LiveData<List<ListRecommendItem>> get() = _recommendations    fun fetchRecommendations(categoryUser: String, tempUser:  Int, timeUser:Int)  {        val client = ApiConfig.getApiService().getRecommendations(categoryUser, tempUser, timeUser)        client.enqueue(object : Callback<RecommendResponse> {            override fun onResponse(                call: Call<RecommendResponse>,                response: Response<RecommendResponse>            ) {                val responseBody = response.body()                if (response.isSuccessful && responseBody != null) {                    _recommendations.value = response.body()?.listRecommend                } else {                    Log.e(TAG, "onFailure: ${response.message()}")                }            }            override fun onFailure(call: Call<RecommendResponse>, t: Throwable) {                Log.e(TAG, "onFailure: ${t.message}")                if (t is SocketTimeoutException) {                    Log.e(TAG, "Timeout occurred, please check your internet connection.")                    // Bisa menampilkan pesan kepada pengguna                }            }        })    }    companion object {        internal const val TAG = "RecommendationViewModel"    }}