package com.capstone.temforeimport android.annotation.SuppressLintimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.app.PendingIntentimport android.content.Contextimport android.content.Intentimport android.os.Buildimport android.util.Logimport androidx.core.app.NotificationCompatimport androidx.work.Workerimport androidx.work.WorkerParametersimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.auth.ktx.authimport com.google.firebase.ktx.Firebaseimport java.util.Calendarclass NotificationWorker(    context: Context,    workerParams: WorkerParameters) : Worker(context, workerParams) {    private lateinit var auth: FirebaseAuth    override fun doWork(): Result {        Log.d("NotificationWorker", "Worker started")        // Ambil jumlah notifikasi yang sudah ditampilkan        val notificationCount = getNotificationCount(applicationContext)        // Jika sudah mencapai 5, reset dan hentikan pekerjaan        if (notificationCount >= 5) {            Log.d("NotificationWorker", "Maximum notifications reached, resetting counter and stopping worker.")            resetNotificationCount(applicationContext)  // Reset jumlah notifikasi            return Result.success()        }        // Increment jumlah notifikasi yang ditampilkan        incrementNotificationCount(applicationContext)        // Menampilkan notifikasi        showNotification(applicationContext)        // Mengembalikan hasil sukses        return Result.success()    }    private fun getNotificationCount(context: Context): Int {        val sharedPreferences = context.getSharedPreferences("NotificationPrefs", Context.MODE_PRIVATE)        return sharedPreferences.getInt("notification_count", 0)    }    private fun incrementNotificationCount(context: Context) {        val sharedPreferences = context.getSharedPreferences("NotificationPrefs", Context.MODE_PRIVATE)        val count = getNotificationCount(context) + 1        sharedPreferences.edit().putInt("notification_count", count).apply()    }    private fun resetNotificationCount(context: Context) {        val sharedPreferences = context.getSharedPreferences("NotificationPrefs", Context.MODE_PRIVATE)        sharedPreferences.edit().putInt("notification_count", 0).apply()        Log.d("NotificationWorker", "Notification count reset to 0")    }    @SuppressLint("ObsoleteSdkInt")    private fun showNotification(context: Context) {        val calendar = Calendar.getInstance()        val currentHour = calendar.get(Calendar.HOUR_OF_DAY)        // Hanya tampilkan notifikasi jika waktu saat ini berada dalam rentang yang ditentukan        val message = when (currentHour) {            in 6..9 -> "Sarapan Pagi!🥪"            in 11..13 -> "Makan Siang!🧺"            in 18..20 -> "Makan Malam!🍴"            else -> {                // Jika tidak berada dalam rentang jam yang ditentukan, tidak tampilkan notifikasi                return            }        }        // Intent untuk membuka MainActivity saat notifikasi diklik        val intent = Intent(context, MainActivity::class.java)        val pendingIntent = PendingIntent.getActivity(            context,            0,            intent,            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE        )        Log.d("NotificationWorker", "Message to display: $message")        // Menampilkan notifikasi        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager        val channelId = "time_based_notification"        // Membuat channel notifikasi untuk Android Oreo ke atas        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val channel = NotificationChannel(                channelId,                "Notifikasi Waktu Makan",                NotificationManager.IMPORTANCE_DEFAULT            )            notificationManager.createNotificationChannel(channel)        }        // Firebase Authentication        auth = Firebase.auth        val user = auth.currentUser        val notification = NotificationCompat.Builder(context, channelId)            .setSmallIcon(R.drawable.img_notifications)            .setContentTitle("Hai, ${user?.displayName ?: "User"} Jangan lupa!")            .setContentText(message)            .setContentIntent(pendingIntent) // Set pending intent            .setPriority(NotificationCompat.PRIORITY_DEFAULT)            .setAutoCancel(true)            .build()        notificationManager.notify(1001, notification)        Log.d("NotificationWorker", "Notification sent")    }}